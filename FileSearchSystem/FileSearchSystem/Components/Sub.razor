@inject FileTransferHistoryService FileTransferHistoryService


<RadzenSplitter Orientation="Orientation.Vertical" Style="height:100vh; overflow: hidden;">
    <div style=" height:100px;">
        <!-- 上部ヘッダー -->
        <RadzenSplitterPane Size="50px" MinSize="50px" MaxSize="150px">
            <header style="height: 100%; background-color: #333; color: white; padding: 10px;">
                <h3>ヘッダー</h3>
            </header>
        </RadzenSplitterPane>
    </div>

    <div>
        <!-- 中央エリア（サイドビュー、メインビュー、詳細ビュー） -->
        <RadzenSplitterPane Size="100%" MinSize="200px" Style="height: calc(100vh - 100px);">
            <RadzenSplitter Orientation="Orientation.Horizontal" >

                <!-- 左側サイドビュー -->
                <RadzenSplitterPane Size="200px" >
                    <div style="background-color: #f4f4f4; padding: 10px;">
                        <h4>サイドビュー</h4>
                        <!-- サイドメニューなどをここに表示 -->
                    </div>
                </RadzenSplitterPane>

                <RadzenSplitterPane  Size="100%" MinSize="200px" height="100%" >
                    <RadzenSplitter Orientation="Orientation.Horizontal">
                        <!-- メインファイル表示エリア -->
                        <RadzenSplitterPane Size="600px" Style="overflow-y:auto; flex-flow:row;">
                            <div style="background-color: #e0e0e0; padding: 10px;">
                                <h4>メインファイル表示エリア</h4>

                            </div>
                            <div style="display: flex; flex-wrap: wrap; gap: 20px; overflow-x: auto;">
                                @if (_files != null && _files.Any())
                                {                            
                                    @foreach (var file in _files)
                                    {
                                        <RadzenCard  Style="height:120px; width:120px; overflow:hidden;" @onclick="() => OnCardClick(file.ArchiveFullPath)">
                                            <p>@file.ArchiveFullPath</p>
                                        </RadzenCard>
                                    }

                                }
                                else
                                {
                                    <p>No data available</p>
                                }
                            </div>
                        </RadzenSplitterPane>

                        <RadzenSplitterPane Size="300px" MinSize="200px" MaxSize="500px">
                            <div style="background-color: #f0f0f0; padding: 10px;">
                                @if (!string.IsNullOrEmpty(_selectedFilePath))
                                {
                                    <p>@_selectedFilePath</p>
                                }
                                else
                                {
                                    <h4>詳細ビュー</h4>
                                }
                                
                                <!-- 詳細情報などをここに表示 -->
                            </div>
                            @if (!string.IsNullOrEmpty(_selectedFilePath))
                            {
                                var extension = Path.GetExtension(_selectedFilePath).ToLower();

                                <!-- 画像ファイルの場合 -->
                                @if (extension == ".jpg" || extension == ".jpeg" || extension == ".png" || extension == ".gif" || extension == ".bmp")
                                {
                                    <img src="@_selectedFilePath" alt="Selected File" style="max-width: 100%; max-height: 100%;" />
                                }
                                <!-- PDFファイルの場合 -->
                                else if (extension == ".pdf")
                                {
                                    @* <iframe src="web/viewer.html?file=@_selectedFilePath" style="width:100%; height:100%;"></iframe> *@
                                    <embed src="@_selectedFilePath" type="application/pdf" style="width:100%; height:100%; border:none;" />
                                }
                                <!-- その他の形式の場合 -->
                                else
                                {
                                    <p>サポートされていないファイル形式です: @_selectedFilePath</p>
                                }
                            }
                            else
                            {
                                <p>画像は選択されていません。</p>
                            }
                        </RadzenSplitterPane>

                    </RadzenSplitter>
                </RadzenSplitterPane>

            </RadzenSplitter>
        </RadzenSplitterPane>
    </div>

    <div style =" height:60px;">
        <!-- 下部フッター -->
        <RadzenSplitterPane Size="50px" MinSize="50px" MaxSize="150px">
            <footer style="height: 100%; background-color: #333; color: white; padding: 10px;">
                <h4>フッター</h4>
            </footer>
        </RadzenSplitterPane>
    </div>

</RadzenSplitter>



@code{
    [Parameter] public List<FileTransferHistory> histories { get; set; }

    private List<FileTransferHistory> _files = new();
    private string _selectedFilePath { get; set; } = "";


    protected override async Task OnParametersSetAsync()
    {
        await Task.Run(() => { 
            foreach (var history in histories)
            {
                if (File.Exists(history.ArchiveFullPath))
                {
                    _files.Add(history);
                }
            }
        });
    }

    private void OnCardClick(string filePath)
    {
        _selectedFilePath = filePath;
    }

    














}
<script type="module">
    import { getDocument, GlobalWorkerOptions } from './js/pdf.mjs';

    // Workerのパスを設定
    GlobalWorkerOptions.workerSrc = './js/pdf.worker.mjs';

    const loadingTask = getDocument('path/to/your/pdf/file.pdf');
    loadingTask.promise.then(pdf => {
        console.log('PDF loaded');

        // 最初のページを取得して表示する例
        pdf.getPage(1).then(page => {
            console.log('Page loaded');

            const scale = 1.5;
            const viewport = page.getViewport({ scale });

            const canvas = document.getElementById('pdf-canvas');
            const context = canvas.getContext('2d');
            canvas.width = viewport.width;
            canvas.height = viewport.height;

            const renderContext = {
                canvasContext: context,
                viewport: viewport,
            };
            page.render(renderContext);
        });
    });
</script>