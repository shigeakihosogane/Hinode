@inject FileTransferService FileTransferService
@inject SettingService SettingService
@inject FileTransferHistoryService FileTransferHistoryService
@inject FileTranceferLogService FileTranceferLogService
@inject SharedService SharedService
@inject ArchiveService ArchiveService
<RadzenLayout >
    <!-- Header -->
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
            <RadzenSidebarToggle Click="@(() => sidebar1Expanded = !sidebar1Expanded)" />
            <RadzenLabel Text="Header" />
        </RadzenStack>
    </RadzenHeader>

    <!-- Sidebar -->
    <RadzenSidebar @bind-Expanded="@sidebar1Expanded">
        <RadzenPanelMenu>
            <RadzenPanelMenuItem Text="Home" Icon="home" Click="@(() => SelectMenuItem("Home"))" />
            <RadzenPanelMenuItem Text="Status" Icon="dashboard" Click="@(() => SelectMenuItem("Status"))" />
            <RadzenPanelMenuItem Text="Log" Icon="list" Click="@(() => SelectMenuItem("Log"))" />
            <RadzenPanelMenuItem Text="Settings" Icon="settings" Click="@(() => SelectMenuItem("Settings"))" />
        </RadzenPanelMenu>
        @* <div class="rz-p-4">
            Sidebar
        </div> *@
        <RadzenBody >
            <RadzenSelectBar Size="ButtonSize.Large" Value="@_isRun" TValue="bool" Change="OnSelectBarChange">
                <Items>
                    <RadzenSelectBarItem Text="IDLE" Value="false" />
                    <RadzenSelectBarItem Text="RUN" Value="true" />
                </Items>
            </RadzenSelectBar>
        </RadzenBody>

        <p>@testString</p>

    </RadzenSidebar>

    <!-- Body -->
    <RadzenBody class="rz-p-6">
        <div style="overflow-x:hidden; overflow-y:hidden;">
            @BodyContent
        </div>
    </RadzenBody>
</RadzenLayout>
<RadzenComponents />


@code {
    private bool _isRun; 
    private Setting _setting = new Setting();
    private List<FileTransferHistory> _fileTransferHistorys = new List<FileTransferHistory>();
    private List<FileTranceferLog> _fileTranceferLogs = new List<FileTranceferLog>();

    private bool sidebar1Expanded = true; // Sidebarの展開状態を管理
    private string selectedMenuItem = "Home"; // 選択されたメニュー項目を管理
    private RenderFragment BodyContent => GetBodyContent(); // RenderFragment型のプロパティを利用


    private Timer? _mainTimer;
    private DateTime? _mainTimerStartDateTime;
    private int _mainTimerElapsedTime;
    private string _mainTimerStatus = "";

    private Timer? _archiveTimer;
    private DateTime _nextExecutionTime;
    private DateTime? _lastExecutionTime;
    private TimeSpan _scheduledTime;
    private int _archiveProcessedCount = 0;


    private string testString = "";



    protected override async Task OnInitializedAsync()
    {
        _isRun = false;//初期常態IDLE
        _setting = await SettingService.GetSetting();
        _scheduledTime = new TimeSpan(_setting.ScheduledExecutionTime.Hour, _setting.ScheduledExecutionTime.Minute, _setting.ScheduledExecutionTime.Second); // 実行時刻

        await this.GetFileTransferHistory();
        await this.GetFileTranceferLog();

        SharedService.OnInsertFileTranceferLog += GetFileTranceferLog;
        SharedService.OnInsertFileTransferHistory += GetFileTransferHistory;
        
        ScheduleDailyExecution();

    }

    private async Task GetFileTransferHistory()
    {
        _fileTransferHistorys = await FileTransferHistoryService.GetFileTransferHistoryAsync();
    }
    private async Task GetFileTranceferLog()
    {
        _fileTranceferLogs = await FileTranceferLogService.GetFileTranceferLogAsync();
    }
    public void Dispose()
    {
        SharedService.OnInsertFileTranceferLog -= GetFileTransferHistory;
        SharedService.OnInsertFileTransferHistory -= GetFileTranceferLog;

        _mainTimer?.Dispose();
        _archiveTimer?.Dispose();

    }

    private void SelectMenuItem(string menuItem)//
    {
        selectedMenuItem = menuItem;
    }
    private RenderFragment GetBodyContent()
    {
        return selectedMenuItem switch
        {
            "Home" => @<Home isRun="@_isRun" OnIsRunChanged="UpdateIsRun" />,
            "Status" => @<Status isRun="@_isRun" mainTimerStartDateTime="@_mainTimerStartDateTime" mainTimerElapsedTime="@_mainTimerElapsedTime" mainTimerStatus="@_mainTimerStatus"
                        nextExecutionTime="@_nextExecutionTime" lastExecutionTime="@_lastExecutionTime" archiveProcessedCount="@_archiveProcessedCount" OnRunArchiveNow="ExecuteDailyTask" />,
            "Log" => @<Log fileTransferHistorys="@_fileTransferHistorys" fileTranceferLogs="@_fileTranceferLogs" />,
            "Settings" => @<Settings setting="@_setting" isRun="@_isRun" OnIsRunChanged="UpdateIsRun" />,
            _ => @<p>Unknown Page</p>
        };
    }    
    private void UpdateIsRun(bool newIsRun)
    {
        _isRun = newIsRun;
        this.OnSelectBarChange(_isRun);
        StateHasChanged();
    }



    private void OnSelectBarChange(bool newValue)
    {
        _isRun = newValue;
        if (_isRun)
        {
            var emsg = "";//ディレクトリ存在チェック
            if (!Directory.Exists(_setting.Trans1Monitoring)) emsg += "監視1ディレクトリなし ";
            if (!Directory.Exists(_setting.Trans1Successful)) emsg += "成功1ディレクトリなし ";
            if (!Directory.Exists(_setting.Trans2Monitoring)) emsg += "監視2ディレクトリなし ";
            if (!Directory.Exists(_setting.Trans2Successful)) emsg += "成功2ディレクトリなし ";
            if (!Directory.Exists(_setting.Trans2Error)) emsg += "失敗2ディレクトリなし ";

            if (string.IsNullOrEmpty(emsg)) // すべてのディレクトリが存在する場合のみ開始
            {
                _mainTimerStatus = "稼働中";
                StartMonitoring(); // フォルダ監視を開始
            }
            else
            {
                _mainTimerStatus = emsg; // エラーメッセージを設定
            }
        }
        else // false の場合は停止
        {
            StopMonitoring(); // フォルダ監視を停止
        }

        StateHasChanged(); // 状態を更新してUIを再レンダリング
    }

    private void StartMonitoring()
    {
        _mainTimer = new Timer(CheckFolder, null, 0, _setting.MonitoringInterval);
        _mainTimerStartDateTime = DateTime.Now;        
    }
    private void StopMonitoring()
    {
        _mainTimer?.Dispose();
        _mainTimer = null;
        _mainTimerStartDateTime = null;
        _mainTimerElapsedTime = 0;
    }

    private async void CheckFolder(object? state)
    {
        if (_mainTimerStartDateTime.HasValue)
        { 
            _mainTimerElapsedTime = (int)(DateTime.Now - _mainTimerStartDateTime.Value).TotalSeconds;
        }
        // testString = _mainTimerElapsedTime.ToString();
        await InvokeAsync(StateHasChanged);

        //scan転送1処理
        var files1 = Directory.GetFiles(_setting.Trans1Monitoring);
        foreach (var file in files1)
        {
            var fn = Path.GetFileName(file);
            await FileTransferService.AtherFileFormat(file);
        }

        //FAX一時転送処理
        var files2 = Directory.GetFiles(_setting.Trans2Monitoring);
        foreach (var file in files2)
        {
            var fn = Path.GetFileName(file);                
            await FileTransferService.GenerateFileNameWithIndex(file);
        }
    }




    private void ScheduleDailyExecution()
    {
        // 次回実行時刻を計算
        DateTime now = DateTime.Now;
        _nextExecutionTime = new DateTime(now.Year, now.Month, now.Day,
            _scheduledTime.Hours, _scheduledTime.Minutes, _scheduledTime.Seconds);

        if (_nextExecutionTime <= now)
        {
            _nextExecutionTime = _nextExecutionTime.AddDays(1);
        }

        TimeSpan timeUntilNextExecution = _nextExecutionTime - now;

        // タイマーをセット
        _archiveTimer = new Timer(ExecuteDailyTask, null, timeUntilNextExecution, Timeout.InfiniteTimeSpan);
    }

    private async void ExecuteDailyTask(object? state)
    {        
        // 実行処理
        _archiveProcessedCount = await ArchiveService.ArchiveProcessedFile();
                
        _lastExecutionTime = DateTime.Now;
        testString = $"[{DateTime.Now}] 日次処理を実行しました。:{_archiveProcessedCount}件";
        await InvokeAsync(StateHasChanged);

        // 次回実行時刻をスケジュール
        ScheduleDailyExecution();
    }














}

